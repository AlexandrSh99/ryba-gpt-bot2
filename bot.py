import os
import logging
import openai
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from dotenv import load_dotenv

logging.basicConfig(level=logging.INFO)
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

if not BOT_TOKEN or not OPENAI_API_KEY:
    print("‚ùå BOT_TOKEN –∏–ª–∏ OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env")
    exit()

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø GPT-–±–æ—Ç –ø–æ —Ä—ã–±–∞–ª–∫–µ üé£ –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å!")

@dp.message_handler()
async def handle_message(message: types.Message):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4-1106-preview",
            messages=[
                {"role": "system", "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ä—ã–±–∞–∫. –û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ –¥–µ–ª—É."},
                {"role": "user", "content": message.text}
            ]
        )
        reply = response.choices[0].message["content"]
        await message.reply(reply)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI: {e}")
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

if __name__ == "__main__":
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Render!")
    executor.start_polling(dp)
